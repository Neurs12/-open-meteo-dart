// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library openmeteo_sdk;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

class Unit {
  final int value;
  const Unit._(this.value);

  factory Unit.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Unit');
    }
    return result;
  }

  static Unit? _createOrNull(int? value) =>
      value == null ? null : Unit.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 40;
  static bool containsValue(int value) => values.containsKey(value);

  static const Unit undefined = Unit._(0);
  static const Unit celsius = Unit._(1);
  static const Unit centimetre = Unit._(2);
  static const Unit cubic_metre_per_cubic_metre = Unit._(3);
  static const Unit cubic_metre_per_second = Unit._(4);
  static const Unit degree_direction = Unit._(5);
  static const Unit dimensionless_integer = Unit._(6);
  static const Unit dimensionless = Unit._(7);
  static const Unit european_air_quality_index = Unit._(8);
  static const Unit fahrenheit = Unit._(9);
  static const Unit feet = Unit._(10);
  static const Unit fraction = Unit._(11);
  static const Unit gdd_celsius = Unit._(12);
  static const Unit geopotential_metre = Unit._(13);
  static const Unit grains_per_cubic_metre = Unit._(14);
  static const Unit gram_per_kilogram = Unit._(15);
  static const Unit hectopascal = Unit._(16);
  static const Unit hours = Unit._(17);
  static const Unit inch = Unit._(18);
  static const Unit iso8601 = Unit._(19);
  static const Unit joule_per_kilogram = Unit._(20);
  static const Unit kelvin = Unit._(21);
  static const Unit kilopascal = Unit._(22);
  static const Unit kilogram_per_square_metre = Unit._(23);
  static const Unit kilometres_per_hour = Unit._(24);
  static const Unit knots = Unit._(25);
  static const Unit megajoule_per_square_metre = Unit._(26);
  static const Unit metre_per_second_not_unit_converted = Unit._(27);
  static const Unit metre_per_second = Unit._(28);
  static const Unit metre = Unit._(29);
  static const Unit micrograms_per_cubic_metre = Unit._(30);
  static const Unit miles_per_hour = Unit._(31);
  static const Unit millimetre = Unit._(32);
  static const Unit pascal = Unit._(33);
  static const Unit per_second = Unit._(34);
  static const Unit percentage = Unit._(35);
  static const Unit seconds = Unit._(36);
  static const Unit unix_time = Unit._(37);
  static const Unit us_air_quality_index = Unit._(38);
  static const Unit watt_per_square_metre = Unit._(39);
  static const Unit wmo_code = Unit._(40);
  static const Map<int, Unit> values = {
    0: undefined,
    1: celsius,
    2: centimetre,
    3: cubic_metre_per_cubic_metre,
    4: cubic_metre_per_second,
    5: degree_direction,
    6: dimensionless_integer,
    7: dimensionless,
    8: european_air_quality_index,
    9: fahrenheit,
    10: feet,
    11: fraction,
    12: gdd_celsius,
    13: geopotential_metre,
    14: grains_per_cubic_metre,
    15: gram_per_kilogram,
    16: hectopascal,
    17: hours,
    18: inch,
    19: iso8601,
    20: joule_per_kilogram,
    21: kelvin,
    22: kilopascal,
    23: kilogram_per_square_metre,
    24: kilometres_per_hour,
    25: knots,
    26: megajoule_per_square_metre,
    27: metre_per_second_not_unit_converted,
    28: metre_per_second,
    29: metre,
    30: micrograms_per_cubic_metre,
    31: miles_per_hour,
    32: millimetre,
    33: pascal,
    34: per_second,
    35: percentage,
    36: seconds,
    37: unix_time,
    38: us_air_quality_index,
    39: watt_per_square_metre,
    40: wmo_code
  };

  static const fb.Reader<Unit> reader = _UnitReader();

  @override
  String toString() {
    return 'Unit{value: $value}';
  }
}

class _UnitReader extends fb.Reader<Unit> {
  const _UnitReader();

  @override
  int get size => 1;

  @override
  Unit read(fb.BufferContext bc, int offset) =>
      Unit.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Model {
  final int value;
  const Model._(this.value);

  factory Model.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Model');
    }
    return result;
  }

  static Model? _createOrNull(int? value) =>
      value == null ? null : Model.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 82;
  static bool containsValue(int value) => values.containsKey(value);

  static const Model undefined = Model._(0);
  static const Model best_match = Model._(1);
  static const Model gfs_seamless = Model._(2);
  static const Model gfs_global = Model._(3);
  static const Model gfs_hrrr = Model._(4);
  static const Model meteofrance_seamless = Model._(5);
  static const Model meteofrance_arpege_seamless = Model._(6);
  static const Model meteofrance_arpege_world = Model._(7);
  static const Model meteofrance_arpege_europe = Model._(8);
  static const Model meteofrance_arome_seamless = Model._(9);
  static const Model meteofrance_arome_france = Model._(10);
  static const Model meteofrance_arome_france_hd = Model._(11);
  static const Model jma_seamless = Model._(12);
  static const Model jma_msm = Model._(13);
  static const Model jms_gsm = Model._(14);
  static const Model jma_gsm = Model._(15);
  static const Model gem_seamless = Model._(16);
  static const Model gem_global = Model._(17);
  static const Model gem_regional = Model._(18);
  static const Model gem_hrdps_continental = Model._(19);
  static const Model icon_seamless = Model._(20);
  static const Model icon_global = Model._(21);
  static const Model icon_eu = Model._(22);
  static const Model icon_d2 = Model._(23);
  static const Model ecmwf_ifs04 = Model._(24);
  static const Model metno_nordic = Model._(25);
  static const Model era5_seamless = Model._(26);
  static const Model era5 = Model._(27);
  static const Model cerra = Model._(28);
  static const Model era5_land = Model._(29);
  static const Model ecmwf_ifs = Model._(30);
  static const Model gwam = Model._(31);
  static const Model ewam = Model._(32);
  static const Model glofas_seamless_v3 = Model._(33);
  static const Model glofas_forecast_v3 = Model._(34);
  static const Model glofas_consolidated_v3 = Model._(35);
  static const Model glofas_seamless_v4 = Model._(36);
  static const Model glofas_forecast_v4 = Model._(37);
  static const Model glofas_consolidated_v4 = Model._(38);
  static const Model gfs025 = Model._(39);
  static const Model gfs05 = Model._(40);
  static const Model CMCC_CM2_VHR4 = Model._(41);
  static const Model FGOALS_f3_H_highresSST = Model._(42);
  static const Model FGOALS_f3_H = Model._(43);
  static const Model HiRAM_SIT_HR = Model._(44);
  static const Model MRI_AGCM3_2_S = Model._(45);
  static const Model EC_Earth3P_HR = Model._(46);
  static const Model MPI_ESM1_2_XR = Model._(47);
  static const Model NICAM16_8S = Model._(48);
  static const Model cams_europe = Model._(49);
  static const Model cams_global = Model._(50);
  static const Model cfsv2 = Model._(51);
  static const Model era5_ocean = Model._(52);
  static const Model cma_grapes_global = Model._(53);
  static const Model bom_access_global = Model._(54);
  static const Model bom_access_global_ensemble = Model._(55);
  static const Model arpae_cosmo_seamless = Model._(56);
  static const Model arpae_cosmo_2i = Model._(57);
  static const Model arpae_cosmo_2i_ruc = Model._(58);
  static const Model arpae_cosmo_5m = Model._(59);
  static const Model ecmwf_ifs025 = Model._(60);
  static const Model ecmwf_aifs025 = Model._(61);
  static const Model gfs013 = Model._(62);
  static const Model gfs_graphcast025 = Model._(63);
  static const Model ecmwf_wam025 = Model._(64);
  static const Model meteofrance_wave = Model._(65);
  static const Model meteofrance_currents = Model._(66);
  static const Model ecmwf_wam025_ensemble = Model._(67);
  static const Model ncep_gfswave025 = Model._(68);
  static const Model ncep_gefswave025 = Model._(69);
  static const Model knmi_seamless = Model._(70);
  static const Model knmi_harmonie_arome_europe = Model._(71);
  static const Model knmi_harmonie_arome_netherlands = Model._(72);
  static const Model dmi_seamless = Model._(73);
  static const Model dmi_harmonie_arome_europe = Model._(74);
  static const Model metno_seamless = Model._(75);
  static const Model era5_ensemble = Model._(76);
  static const Model ecmwf_ifs_analysis = Model._(77);
  static const Model ecmwf_ifs_long_window = Model._(78);
  static const Model ecmwf_ifs_analysis_long_window = Model._(79);
  static const Model ukmo_global_deterministic_10km = Model._(80);
  static const Model ukmo_uk_deterministic_2km = Model._(81);
  static const Model ukmo_seamless = Model._(82);
  static const Map<int, Model> values = {
    0: undefined,
    1: best_match,
    2: gfs_seamless,
    3: gfs_global,
    4: gfs_hrrr,
    5: meteofrance_seamless,
    6: meteofrance_arpege_seamless,
    7: meteofrance_arpege_world,
    8: meteofrance_arpege_europe,
    9: meteofrance_arome_seamless,
    10: meteofrance_arome_france,
    11: meteofrance_arome_france_hd,
    12: jma_seamless,
    13: jma_msm,
    14: jms_gsm,
    15: jma_gsm,
    16: gem_seamless,
    17: gem_global,
    18: gem_regional,
    19: gem_hrdps_continental,
    20: icon_seamless,
    21: icon_global,
    22: icon_eu,
    23: icon_d2,
    24: ecmwf_ifs04,
    25: metno_nordic,
    26: era5_seamless,
    27: era5,
    28: cerra,
    29: era5_land,
    30: ecmwf_ifs,
    31: gwam,
    32: ewam,
    33: glofas_seamless_v3,
    34: glofas_forecast_v3,
    35: glofas_consolidated_v3,
    36: glofas_seamless_v4,
    37: glofas_forecast_v4,
    38: glofas_consolidated_v4,
    39: gfs025,
    40: gfs05,
    41: CMCC_CM2_VHR4,
    42: FGOALS_f3_H_highresSST,
    43: FGOALS_f3_H,
    44: HiRAM_SIT_HR,
    45: MRI_AGCM3_2_S,
    46: EC_Earth3P_HR,
    47: MPI_ESM1_2_XR,
    48: NICAM16_8S,
    49: cams_europe,
    50: cams_global,
    51: cfsv2,
    52: era5_ocean,
    53: cma_grapes_global,
    54: bom_access_global,
    55: bom_access_global_ensemble,
    56: arpae_cosmo_seamless,
    57: arpae_cosmo_2i,
    58: arpae_cosmo_2i_ruc,
    59: arpae_cosmo_5m,
    60: ecmwf_ifs025,
    61: ecmwf_aifs025,
    62: gfs013,
    63: gfs_graphcast025,
    64: ecmwf_wam025,
    65: meteofrance_wave,
    66: meteofrance_currents,
    67: ecmwf_wam025_ensemble,
    68: ncep_gfswave025,
    69: ncep_gefswave025,
    70: knmi_seamless,
    71: knmi_harmonie_arome_europe,
    72: knmi_harmonie_arome_netherlands,
    73: dmi_seamless,
    74: dmi_harmonie_arome_europe,
    75: metno_seamless,
    76: era5_ensemble,
    77: ecmwf_ifs_analysis,
    78: ecmwf_ifs_long_window,
    79: ecmwf_ifs_analysis_long_window,
    80: ukmo_global_deterministic_10km,
    81: ukmo_uk_deterministic_2km,
    82: ukmo_seamless
  };

  static const fb.Reader<Model> reader = _ModelReader();

  @override
  String toString() {
    return 'Model{value: $value}';
  }
}

class _ModelReader extends fb.Reader<Model> {
  const _ModelReader();

  @override
  int get size => 1;

  @override
  Model read(fb.BufferContext bc, int offset) =>
      Model.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Variable {
  final int value;
  const Variable._(this.value);

  factory Variable.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Variable');
    }
    return result;
  }

  static Variable? _createOrNull(int? value) =>
      value == null ? null : Variable.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 111;
  static bool containsValue(int value) => values.containsKey(value);

  static const Variable undefined = Variable._(0);
  static const Variable apparent_temperature = Variable._(1);
  static const Variable cape = Variable._(2);
  static const Variable cloud_cover = Variable._(3);
  static const Variable cloud_cover_high = Variable._(4);
  static const Variable cloud_cover_low = Variable._(5);
  static const Variable cloud_cover_mid = Variable._(6);
  static const Variable daylight_duration = Variable._(7);
  static const Variable dew_point = Variable._(8);
  static const Variable diffuse_radiation = Variable._(9);
  static const Variable diffuse_radiation_instant = Variable._(10);
  static const Variable direct_normal_irradiance = Variable._(11);
  static const Variable direct_normal_irradiance_instant = Variable._(12);
  static const Variable direct_radiation = Variable._(13);
  static const Variable direct_radiation_instant = Variable._(14);
  static const Variable et0_fao_evapotranspiration = Variable._(15);
  static const Variable evapotranspiration = Variable._(16);
  static const Variable freezing_level_height = Variable._(17);
  static const Variable growing_degree_days = Variable._(18);
  static const Variable is_day = Variable._(19);
  static const Variable latent_heat_flux = Variable._(20);
  static const Variable leaf_wetness_probability = Variable._(21);
  static const Variable lifted_index = Variable._(22);
  static const Variable lightning_potential = Variable._(23);
  static const Variable precipitation = Variable._(24);
  static const Variable precipitation_hours = Variable._(25);
  static const Variable precipitation_probability = Variable._(26);
  static const Variable pressure_msl = Variable._(27);
  static const Variable rain = Variable._(28);
  static const Variable relative_humidity = Variable._(29);
  static const Variable runoff = Variable._(30);
  static const Variable sensible_heat_flux = Variable._(31);
  static const Variable shortwave_radiation = Variable._(32);
  static const Variable shortwave_radiation_instant = Variable._(33);
  static const Variable showers = Variable._(34);
  static const Variable snow_depth = Variable._(35);
  static const Variable snow_height = Variable._(36);
  static const Variable snowfall = Variable._(37);
  static const Variable snowfall_height = Variable._(38);
  static const Variable snowfall_water_equivalent = Variable._(39);
  static const Variable sunrise = Variable._(40);
  static const Variable sunset = Variable._(41);
  static const Variable soil_moisture = Variable._(42);
  static const Variable soil_moisture_index = Variable._(43);
  static const Variable soil_temperature = Variable._(44);
  static const Variable surface_pressure = Variable._(45);
  static const Variable surface_temperature = Variable._(46);
  static const Variable temperature = Variable._(47);
  static const Variable terrestrial_radiation = Variable._(48);
  static const Variable terrestrial_radiation_instant = Variable._(49);
  static const Variable total_column_integrated_water_vapour = Variable._(50);
  static const Variable updraft = Variable._(51);
  static const Variable uv_index = Variable._(52);
  static const Variable uv_index_clear_sky = Variable._(53);
  static const Variable vapour_pressure_deficit = Variable._(54);
  static const Variable visibility = Variable._(55);
  static const Variable weather_code = Variable._(56);
  static const Variable wind_direction = Variable._(57);
  static const Variable wind_gusts = Variable._(58);
  static const Variable wind_speed = Variable._(59);
  static const Variable vertical_velocity = Variable._(60);
  static const Variable geopotential_height = Variable._(61);
  static const Variable wet_bulb_temperature = Variable._(62);
  static const Variable river_discharge = Variable._(63);
  static const Variable wave_height = Variable._(64);
  static const Variable wave_period = Variable._(65);
  static const Variable wave_direction = Variable._(66);
  static const Variable wind_wave_height = Variable._(67);
  static const Variable wind_wave_period = Variable._(68);
  static const Variable wind_wave_peak_period = Variable._(69);
  static const Variable wind_wave_direction = Variable._(70);
  static const Variable swell_wave_height = Variable._(71);
  static const Variable swell_wave_period = Variable._(72);
  static const Variable swell_wave_peak_period = Variable._(73);
  static const Variable swell_wave_direction = Variable._(74);
  static const Variable pm10 = Variable._(75);
  static const Variable pm2p5 = Variable._(76);
  static const Variable dust = Variable._(77);
  static const Variable aerosol_optical_depth = Variable._(78);
  static const Variable carbon_monoxide = Variable._(79);
  static const Variable nitrogen_dioxide = Variable._(80);
  static const Variable ammonia = Variable._(81);
  static const Variable ozone = Variable._(82);
  static const Variable sulphur_dioxide = Variable._(83);
  static const Variable alder_pollen = Variable._(84);
  static const Variable birch_pollen = Variable._(85);
  static const Variable grass_pollen = Variable._(86);
  static const Variable mugwort_pollen = Variable._(87);
  static const Variable olive_pollen = Variable._(88);
  static const Variable ragweed_pollen = Variable._(89);
  static const Variable european_aqi = Variable._(90);
  static const Variable european_aqi_pm2p5 = Variable._(91);
  static const Variable european_aqi_pm10 = Variable._(92);
  static const Variable european_aqi_nitrogen_dioxide = Variable._(93);
  static const Variable european_aqi_ozone = Variable._(94);
  static const Variable european_aqi_sulphur_dioxide = Variable._(95);
  static const Variable us_aqi = Variable._(96);
  static const Variable us_aqi_pm2p5 = Variable._(97);
  static const Variable us_aqi_pm10 = Variable._(98);
  static const Variable us_aqi_nitrogen_dioxide = Variable._(99);
  static const Variable us_aqi_ozone = Variable._(100);
  static const Variable us_aqi_sulphur_dioxide = Variable._(101);
  static const Variable us_aqi_carbon_monoxide = Variable._(102);
  static const Variable sunshine_duration = Variable._(103);
  static const Variable convective_inhibition = Variable._(104);
  static const Variable shortwave_radiation_clear_sky = Variable._(105);
  static const Variable global_tilted_irradiance = Variable._(106);
  static const Variable global_tilted_irradiance_instant = Variable._(107);
  static const Variable ocean_current_velocity = Variable._(108);
  static const Variable ocean_current_direction = Variable._(109);
  static const Variable cloud_base = Variable._(110);
  static const Variable cloud_top = Variable._(111);
  static const Map<int, Variable> values = {
    0: undefined,
    1: apparent_temperature,
    2: cape,
    3: cloud_cover,
    4: cloud_cover_high,
    5: cloud_cover_low,
    6: cloud_cover_mid,
    7: daylight_duration,
    8: dew_point,
    9: diffuse_radiation,
    10: diffuse_radiation_instant,
    11: direct_normal_irradiance,
    12: direct_normal_irradiance_instant,
    13: direct_radiation,
    14: direct_radiation_instant,
    15: et0_fao_evapotranspiration,
    16: evapotranspiration,
    17: freezing_level_height,
    18: growing_degree_days,
    19: is_day,
    20: latent_heat_flux,
    21: leaf_wetness_probability,
    22: lifted_index,
    23: lightning_potential,
    24: precipitation,
    25: precipitation_hours,
    26: precipitation_probability,
    27: pressure_msl,
    28: rain,
    29: relative_humidity,
    30: runoff,
    31: sensible_heat_flux,
    32: shortwave_radiation,
    33: shortwave_radiation_instant,
    34: showers,
    35: snow_depth,
    36: snow_height,
    37: snowfall,
    38: snowfall_height,
    39: snowfall_water_equivalent,
    40: sunrise,
    41: sunset,
    42: soil_moisture,
    43: soil_moisture_index,
    44: soil_temperature,
    45: surface_pressure,
    46: surface_temperature,
    47: temperature,
    48: terrestrial_radiation,
    49: terrestrial_radiation_instant,
    50: total_column_integrated_water_vapour,
    51: updraft,
    52: uv_index,
    53: uv_index_clear_sky,
    54: vapour_pressure_deficit,
    55: visibility,
    56: weather_code,
    57: wind_direction,
    58: wind_gusts,
    59: wind_speed,
    60: vertical_velocity,
    61: geopotential_height,
    62: wet_bulb_temperature,
    63: river_discharge,
    64: wave_height,
    65: wave_period,
    66: wave_direction,
    67: wind_wave_height,
    68: wind_wave_period,
    69: wind_wave_peak_period,
    70: wind_wave_direction,
    71: swell_wave_height,
    72: swell_wave_period,
    73: swell_wave_peak_period,
    74: swell_wave_direction,
    75: pm10,
    76: pm2p5,
    77: dust,
    78: aerosol_optical_depth,
    79: carbon_monoxide,
    80: nitrogen_dioxide,
    81: ammonia,
    82: ozone,
    83: sulphur_dioxide,
    84: alder_pollen,
    85: birch_pollen,
    86: grass_pollen,
    87: mugwort_pollen,
    88: olive_pollen,
    89: ragweed_pollen,
    90: european_aqi,
    91: european_aqi_pm2p5,
    92: european_aqi_pm10,
    93: european_aqi_nitrogen_dioxide,
    94: european_aqi_ozone,
    95: european_aqi_sulphur_dioxide,
    96: us_aqi,
    97: us_aqi_pm2p5,
    98: us_aqi_pm10,
    99: us_aqi_nitrogen_dioxide,
    100: us_aqi_ozone,
    101: us_aqi_sulphur_dioxide,
    102: us_aqi_carbon_monoxide,
    103: sunshine_duration,
    104: convective_inhibition,
    105: shortwave_radiation_clear_sky,
    106: global_tilted_irradiance,
    107: global_tilted_irradiance_instant,
    108: ocean_current_velocity,
    109: ocean_current_direction,
    110: cloud_base,
    111: cloud_top
  };

  static const fb.Reader<Variable> reader = _VariableReader();

  @override
  String toString() {
    return 'Variable{value: $value}';
  }
}

class _VariableReader extends fb.Reader<Variable> {
  const _VariableReader();

  @override
  int get size => 1;

  @override
  Variable read(fb.BufferContext bc, int offset) =>
      Variable.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Aggregation {
  final int value;
  const Aggregation._(this.value);

  factory Aggregation.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Aggregation');
    }
    return result;
  }

  static Aggregation? _createOrNull(int? value) =>
      value == null ? null : Aggregation.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 11;
  static bool containsValue(int value) => values.containsKey(value);

  static const Aggregation none = Aggregation._(0);
  static const Aggregation minimum = Aggregation._(1);
  static const Aggregation maximum = Aggregation._(2);
  static const Aggregation mean = Aggregation._(3);
  static const Aggregation p10 = Aggregation._(4);
  static const Aggregation p25 = Aggregation._(5);
  static const Aggregation median = Aggregation._(6);
  static const Aggregation p75 = Aggregation._(7);
  static const Aggregation p90 = Aggregation._(8);
  static const Aggregation dominant = Aggregation._(9);
  static const Aggregation sum = Aggregation._(10);
  static const Aggregation spread = Aggregation._(11);
  static const Map<int, Aggregation> values = {
    0: none,
    1: minimum,
    2: maximum,
    3: mean,
    4: p10,
    5: p25,
    6: median,
    7: p75,
    8: p90,
    9: dominant,
    10: sum,
    11: spread
  };

  static const fb.Reader<Aggregation> reader = _AggregationReader();

  @override
  String toString() {
    return 'Aggregation{value: $value}';
  }
}

class _AggregationReader extends fb.Reader<Aggregation> {
  const _AggregationReader();

  @override
  int get size => 1;

  @override
  Aggregation read(fb.BufferContext bc, int offset) =>
      Aggregation.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class VariableWithValues {
  VariableWithValues._(this._bc, this._bcOffset);
  factory VariableWithValues(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VariableWithValues> reader =
      _VariableWithValuesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Variable get variable => Variable.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  Unit get unit =>
      Unit.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  double get value =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  List<double>? get values => const fb.ListReader<double>(fb.Float32Reader())
      .vTableGetNullable(_bc, _bcOffset, 10);
  List<int>? get valuesInt64 => const fb.ListReader<int>(fb.Int64Reader())
      .vTableGetNullable(_bc, _bcOffset, 12);
  int get altitude => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 14, 0);
  Aggregation get aggregation => Aggregation.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  int get pressureLevel =>
      const fb.Int16Reader().vTableGet(_bc, _bcOffset, 18, 0);
  int get depth => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 20, 0);
  int get depthTo => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 22, 0);
  int get ensembleMember =>
      const fb.Int16Reader().vTableGet(_bc, _bcOffset, 24, 0);
  int get previousDay =>
      const fb.Int16Reader().vTableGet(_bc, _bcOffset, 26, 0);

  @override
  String toString() {
    return 'VariableWithValues{variable: $variable, unit: $unit, value: $value, values: $values, valuesInt64: $valuesInt64, altitude: $altitude, aggregation: $aggregation, pressureLevel: $pressureLevel, depth: $depth, depthTo: $depthTo, ensembleMember: $ensembleMember, previousDay: $previousDay}';
  }
}

class _VariableWithValuesReader extends fb.TableReader<VariableWithValues> {
  const _VariableWithValuesReader();

  @override
  VariableWithValues createObject(fb.BufferContext bc, int offset) =>
      VariableWithValues._(bc, offset);
}

class VariableWithValuesBuilder {
  VariableWithValuesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addVariable(Variable? variable) {
    fbBuilder.addUint8(0, variable?.value);
    return fbBuilder.offset;
  }

  int addUnit(Unit? unit) {
    fbBuilder.addUint8(1, unit?.value);
    return fbBuilder.offset;
  }

  int addValue(double? value) {
    fbBuilder.addFloat32(2, value);
    return fbBuilder.offset;
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addValuesInt64Offset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int addAltitude(int? altitude) {
    fbBuilder.addInt16(5, altitude);
    return fbBuilder.offset;
  }

  int addAggregation(Aggregation? aggregation) {
    fbBuilder.addUint8(6, aggregation?.value);
    return fbBuilder.offset;
  }

  int addPressureLevel(int? pressureLevel) {
    fbBuilder.addInt16(7, pressureLevel);
    return fbBuilder.offset;
  }

  int addDepth(int? depth) {
    fbBuilder.addInt16(8, depth);
    return fbBuilder.offset;
  }

  int addDepthTo(int? depthTo) {
    fbBuilder.addInt16(9, depthTo);
    return fbBuilder.offset;
  }

  int addEnsembleMember(int? ensembleMember) {
    fbBuilder.addInt16(10, ensembleMember);
    return fbBuilder.offset;
  }

  int addPreviousDay(int? previousDay) {
    fbBuilder.addInt16(11, previousDay);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VariableWithValuesObjectBuilder extends fb.ObjectBuilder {
  final Variable? _variable;
  final Unit? _unit;
  final double? _value;
  final List<double>? _values;
  final List<int>? _valuesInt64;
  final int? _altitude;
  final Aggregation? _aggregation;
  final int? _pressureLevel;
  final int? _depth;
  final int? _depthTo;
  final int? _ensembleMember;
  final int? _previousDay;

  VariableWithValuesObjectBuilder({
    Variable? variable,
    Unit? unit,
    double? value,
    List<double>? values,
    List<int>? valuesInt64,
    int? altitude,
    Aggregation? aggregation,
    int? pressureLevel,
    int? depth,
    int? depthTo,
    int? ensembleMember,
    int? previousDay,
  })  : _variable = variable,
        _unit = unit,
        _value = value,
        _values = values,
        _valuesInt64 = valuesInt64,
        _altitude = altitude,
        _aggregation = aggregation,
        _pressureLevel = pressureLevel,
        _depth = depth,
        _depthTo = depthTo,
        _ensembleMember = ensembleMember,
        _previousDay = previousDay;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset =
        _values == null ? null : fbBuilder.writeListFloat32(_values!);
    final int? valuesInt64Offset =
        _valuesInt64 == null ? null : fbBuilder.writeListInt64(_valuesInt64!);
    fbBuilder.startTable(12);
    fbBuilder.addUint8(0, _variable?.value);
    fbBuilder.addUint8(1, _unit?.value);
    fbBuilder.addFloat32(2, _value);
    fbBuilder.addOffset(3, valuesOffset);
    fbBuilder.addOffset(4, valuesInt64Offset);
    fbBuilder.addInt16(5, _altitude);
    fbBuilder.addUint8(6, _aggregation?.value);
    fbBuilder.addInt16(7, _pressureLevel);
    fbBuilder.addInt16(8, _depth);
    fbBuilder.addInt16(9, _depthTo);
    fbBuilder.addInt16(10, _ensembleMember);
    fbBuilder.addInt16(11, _previousDay);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VariablesWithTime {
  VariablesWithTime._(this._bc, this._bcOffset);
  factory VariablesWithTime(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VariablesWithTime> reader = _VariablesWithTimeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get time => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timeEnd => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get interval => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  List<VariableWithValues>? get variables =>
      const fb.ListReader<VariableWithValues>(VariableWithValues.reader)
          .vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'VariablesWithTime{time: $time, timeEnd: $timeEnd, interval: $interval, variables: $variables}';
  }
}

class _VariablesWithTimeReader extends fb.TableReader<VariablesWithTime> {
  const _VariablesWithTimeReader();

  @override
  VariablesWithTime createObject(fb.BufferContext bc, int offset) =>
      VariablesWithTime._(bc, offset);
}

class VariablesWithTimeBuilder {
  VariablesWithTimeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTime(int? time) {
    fbBuilder.addInt64(0, time);
    return fbBuilder.offset;
  }

  int addTimeEnd(int? timeEnd) {
    fbBuilder.addInt64(1, timeEnd);
    return fbBuilder.offset;
  }

  int addInterval(int? interval) {
    fbBuilder.addInt32(2, interval);
    return fbBuilder.offset;
  }

  int addVariablesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VariablesWithTimeObjectBuilder extends fb.ObjectBuilder {
  final int? _time;
  final int? _timeEnd;
  final int? _interval;
  final List<VariableWithValuesObjectBuilder>? _variables;

  VariablesWithTimeObjectBuilder({
    int? time,
    int? timeEnd,
    int? interval,
    List<VariableWithValuesObjectBuilder>? variables,
  })  : _time = time,
        _timeEnd = timeEnd,
        _interval = interval,
        _variables = variables;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? variablesOffset = _variables == null
        ? null
        : fbBuilder.writeList(
            _variables!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, _time);
    fbBuilder.addInt64(1, _timeEnd);
    fbBuilder.addInt32(2, _interval);
    fbBuilder.addOffset(3, variablesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class WeatherApiResponse {
  WeatherApiResponse._(this._bc, this._bcOffset);
  factory WeatherApiResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WeatherApiResponse> reader =
      _WeatherApiResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get latitude =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  double get longitude =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  double get elevation =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  double get generationTimeMilliseconds =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  int get locationId => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  Model get model =>
      Model.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  int get utcOffsetSeconds =>
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  String? get timezone =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get timezoneAbbreviation =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  VariablesWithTime? get current =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 22);
  VariablesWithTime? get daily =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 24);
  VariablesWithTime? get hourly =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 26);
  VariablesWithTime? get minutely15 =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 28);
  VariablesWithTime? get sixHourly =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 30);

  @override
  String toString() {
    return 'WeatherApiResponse{latitude: $latitude, longitude: $longitude, elevation: $elevation, generationTimeMilliseconds: $generationTimeMilliseconds, locationId: $locationId, model: $model, utcOffsetSeconds: $utcOffsetSeconds, timezone: $timezone, timezoneAbbreviation: $timezoneAbbreviation, current: $current, daily: $daily, hourly: $hourly, minutely15: $minutely15, sixHourly: $sixHourly}';
  }
}

class _WeatherApiResponseReader extends fb.TableReader<WeatherApiResponse> {
  const _WeatherApiResponseReader();

  @override
  WeatherApiResponse createObject(fb.BufferContext bc, int offset) =>
      WeatherApiResponse._(bc, offset);
}

class WeatherApiResponseBuilder {
  WeatherApiResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(14);
  }

  int addLatitude(double? latitude) {
    fbBuilder.addFloat32(0, latitude);
    return fbBuilder.offset;
  }

  int addLongitude(double? longitude) {
    fbBuilder.addFloat32(1, longitude);
    return fbBuilder.offset;
  }

  int addElevation(double? elevation) {
    fbBuilder.addFloat32(2, elevation);
    return fbBuilder.offset;
  }

  int addGenerationTimeMilliseconds(double? generationTimeMilliseconds) {
    fbBuilder.addFloat32(3, generationTimeMilliseconds);
    return fbBuilder.offset;
  }

  int addLocationId(int? locationId) {
    fbBuilder.addInt64(4, locationId);
    return fbBuilder.offset;
  }

  int addModel(Model? model) {
    fbBuilder.addUint8(5, model?.value);
    return fbBuilder.offset;
  }

  int addUtcOffsetSeconds(int? utcOffsetSeconds) {
    fbBuilder.addInt32(6, utcOffsetSeconds);
    return fbBuilder.offset;
  }

  int addTimezoneOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int addTimezoneAbbreviationOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addCurrentOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int addDailyOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int addHourlyOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int addMinutely15Offset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int addSixHourlyOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeatherApiResponseObjectBuilder extends fb.ObjectBuilder {
  final double? _latitude;
  final double? _longitude;
  final double? _elevation;
  final double? _generationTimeMilliseconds;
  final int? _locationId;
  final Model? _model;
  final int? _utcOffsetSeconds;
  final String? _timezone;
  final String? _timezoneAbbreviation;
  final VariablesWithTimeObjectBuilder? _current;
  final VariablesWithTimeObjectBuilder? _daily;
  final VariablesWithTimeObjectBuilder? _hourly;
  final VariablesWithTimeObjectBuilder? _minutely15;
  final VariablesWithTimeObjectBuilder? _sixHourly;

  WeatherApiResponseObjectBuilder({
    double? latitude,
    double? longitude,
    double? elevation,
    double? generationTimeMilliseconds,
    int? locationId,
    Model? model,
    int? utcOffsetSeconds,
    String? timezone,
    String? timezoneAbbreviation,
    VariablesWithTimeObjectBuilder? current,
    VariablesWithTimeObjectBuilder? daily,
    VariablesWithTimeObjectBuilder? hourly,
    VariablesWithTimeObjectBuilder? minutely15,
    VariablesWithTimeObjectBuilder? sixHourly,
  })  : _latitude = latitude,
        _longitude = longitude,
        _elevation = elevation,
        _generationTimeMilliseconds = generationTimeMilliseconds,
        _locationId = locationId,
        _model = model,
        _utcOffsetSeconds = utcOffsetSeconds,
        _timezone = timezone,
        _timezoneAbbreviation = timezoneAbbreviation,
        _current = current,
        _daily = daily,
        _hourly = hourly,
        _minutely15 = minutely15,
        _sixHourly = sixHourly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? timezoneOffset =
        _timezone == null ? null : fbBuilder.writeString(_timezone!);
    final int? timezoneAbbreviationOffset = _timezoneAbbreviation == null
        ? null
        : fbBuilder.writeString(_timezoneAbbreviation!);
    final int? currentOffset = _current?.getOrCreateOffset(fbBuilder);
    final int? dailyOffset = _daily?.getOrCreateOffset(fbBuilder);
    final int? hourlyOffset = _hourly?.getOrCreateOffset(fbBuilder);
    final int? minutely15Offset = _minutely15?.getOrCreateOffset(fbBuilder);
    final int? sixHourlyOffset = _sixHourly?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(14);
    fbBuilder.addFloat32(0, _latitude);
    fbBuilder.addFloat32(1, _longitude);
    fbBuilder.addFloat32(2, _elevation);
    fbBuilder.addFloat32(3, _generationTimeMilliseconds);
    fbBuilder.addInt64(4, _locationId);
    fbBuilder.addUint8(5, _model?.value);
    fbBuilder.addInt32(6, _utcOffsetSeconds);
    fbBuilder.addOffset(7, timezoneOffset);
    fbBuilder.addOffset(8, timezoneAbbreviationOffset);
    fbBuilder.addOffset(9, currentOffset);
    fbBuilder.addOffset(10, dailyOffset);
    fbBuilder.addOffset(11, hourlyOffset);
    fbBuilder.addOffset(12, minutely15Offset);
    fbBuilder.addOffset(13, sixHourlyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
